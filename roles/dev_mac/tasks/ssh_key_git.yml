---
- name: "[SSH_KEY_GIT] Check git key exists on host"
  ansible.builtin.stat:
    path: "{{ item.folder }}{{ item.name }}"
  register: key_file_info

- name: "[SSH_KEY_GIT] Create ssh key pair"
  ansible.builtin.user:
    name: "{{ ansible_env.USER }}"
    generate_ssh_key: true
    ssh_key_type: ed25519
    ssh_key_file: "{{ item.folder }}{{ item.name }}"
    ssh_key_passphrase: "{{ lookup('vars', 'ssh_key_git_passphrase_' + item.name) }}"
    ssh_key_comment: "generated by ty-env-setup"
  when: not key_file_info.stat.exists
  register: key_info

- name: "[SSH_KEY_GIT] Install jmespath for json queries"
  ansible.builtin.pip:
    name: jmespath

- name: "[SSH_KEY_GIT] Get current ssh keys from gitlab"
  ansible.builtin.uri:
    url: "{{ ssh_key_git_remote[item.name].remote_url }}/api/v4/user/keys"
    headers:
      PRIVATE-TOKEN: "{{ ssh_key_git_remote[item.name].api_key }}"
  register: gitlab_keys
  when: ssh_key_git_remote[item.name].remote_type == "gitlab"

- name: "[SSH_KEY_GIT] Set current ssh keys result"
  ansible.builtin.set_fact:
    gitlab_current_ssh_key_titles: "{{ gitlab_keys.json | json_query('[?title == `gitlab`].title') }}"
  when: ssh_key_git_remote[item.name].remote_type == "gitlab"

- name: "[SSH_KEY_GIT] Create ssh key on gitlab"
  ansible.builtin.uri:
    url: "{{ ssh_key_git_remote[item.name].remote_url }}/api/v4/user/keys"
    method: POST
    body_format: json    
    body:
      title: "{{ ssh_key_git_remote[item.name].remote_name }}"
      key: "{{ lookup('file', item.folder + item.name + '.pub') }}"
      expires_at: "{{ '%Y-%m-%d' | strftime( ( ansible_date_time.epoch | int ) + ( 86400 * ssh_key_git_remote[item.name].remote_expires_at_days )  ) }}"
    status_code: 201
    headers:
      PRIVATE-TOKEN: "{{ item.api_key }}"
  when: ssh_key_git_remote[item.name].remote_type == "gitlab" and ssh_key_git_remote[item.name].remote_name not in gitlab_current_ssh_key_titles
